#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <conio.h>
#include <time.h>
#define MAX_CLIENTES 10

typedef struct{
	char nome[30], email[30];
	int cartao_credito, id, senha, status, plano;
}USUARIO;

void LerArquivo(USUARIO* c, int tam_cliente){//abre o arquivo para leitura
	FILE* arquivo = fopen("clientes.txt", "rb");
	fread(c, sizeof(USUARIO), tam_cliente, arquivo);
	fclose(arquivo);
}

void SalvarArquivo(USUARIO* c, int tam_cliente){// salva o arquivo no final do programa;
	FILE* arquivo = fopen("clientes.txt", "wb");
	if(arquivo == NULL){
		printf("erro na abertura do arquivo\n");//imprime na tela se o arquivo estiver vazio
		getch();
	}
	else{
		fwrite(c, sizeof(USUARIO), tam_cliente, arquivo);
	}
	fclose(arquivo);
}

void Listar_clientes(USUARIO* c, int tam_cliente){//lista todos os clientes armazenados no vetor com base em seu status
	int i;
	for (i = 0; i < tam_cliente; i++){
		if (c[i].status == 1){
			printf("   %i\n", i);
			printf(" Nome: %s", c[i].nome);
			printf(" Email: %s", c[i].email);
			printf(" ID: %i\n", c[i].id);
			printf(" Plano: %i\n", c[i].plano);
			printf("----------------------------------\n\n");
			getch();
		}
	}
}

int Buscar_cliente(USUARIO* c, int id, int tam_cliente){// atraves do id
	int i;
	for (i = 0; i < tam_cliente; i++){
		if (id == c[i].id){
			return i; //se encontrar id correspondente retorna a posicao do no vetor
		}
	}
	return -1;
}

int Inserir_Posicao(USUARIO* c, USUARIO temp, int* pos, int tam_cliente){//recebe uma funcao temporaria cadastrada no menu e insere o novo cliente em posicoes atualizadas do vetor
	int res = Buscar_cliente(c, temp.id, tam_cliente);
	if(res == -1){
		temp.status = 1;
		c[*pos] = temp;
		*pos = *pos +1;
		return 1;
	}
	return 0;
}

int Remover_cliente(USUARIO* c, int id, int tam_cliente){//remove alterando o status 
	int res = Buscar_cliente(c, id,tam_cliente);
	if(res != -1)
	{
		c[res].status = 0;
		return 1; //retorna 1 se bem sucedido
	}
	return 0;
}

int Reativar_clientes(USUARIO* c, int id, int tam_cliente){//reativa o status
	int res = Buscar_cliente(c, id,tam_cliente);
	if(res != -1)
	{
		c[res].status = 1;
		return 1;//retorna 1 se bem sucedido
	}
	return 0;
}

int main(){
	int tam_cliente = 10;
	int id, opcao, opcao_2, res, pos_inicial = 0;
	USUARIO cliente[tam_cliente], login_temp, temp;
	LerArquivo(cliente, tam_cliente);

	
	clock_t tempo_inicial = clock(), tempo_final, tempo_decorrido; //variaveis que armazenam em segundos o tempo do processador durante a execucao do programa
	do{
		system("CLS");
		printf("--------------------------\n");
		printf("    1)Usuario\n    2)Adminstrador\n    3)Salvar e Sair\n ");
		printf("--------------------------\n");
		scanf("%i", &opcao);
		getchar();
		switch(opcao){//1 swuitch = separacao entre usuario e adm
			case 1:
				system("CLS");
				printf("----------------------\n");
				printf("   1)Login\n   2)Nova conta\n ");
				printf("----------------------\n");
				scanf("%i", &opcao_2);
				if (opcao_2 == 1){
				
				}
				else if (opcao_2 == 2){
					system("CLS");
					printf("------------------------------\n");
					printf("Escolha uma opcao de plano mensal \n 1) Basico com 1 tela por R$20;\n 2) Padrao com 2 telas em HD por R$30;\n 3) Premium com 4 telas em ULTRA HD por R$40;\n");
					printf("------------------------------\n");
					scanf("%i", &temp.plano);
					getchar();
					system("CLS");
					printf("Digite seu nome: ");
					fgets(temp.nome, sizeof(temp.nome), stdin);
					system("CLS");
					printf("Digite seu email: ");
					fgets(temp.email, sizeof(temp.email), stdin);
					system("CLS");
					printf("Digite seu ID: ");
					scanf("%i", &temp.id);
					getchar();
					system("CLS");
					printf("Digite seu senha: ");
					scanf("%i", &temp.senha);
					getchar();
					system("CLS");
					printf("Digite o numero do seu cartao de credito: ");
					scanf("%i", &temp.cartao_credito);

					int inseriu = Inserir_Posicao(cliente, temp, &pos_inicial,tam_cliente);
					
					if(inseriu == 1){
						printf("----------------------------------\n");
						printf(" Cadastro realizado com sucesso!\n");
						printf("----------------------------------\n");
						getch();
						system("cls");
					}
					else{
						printf("Cadastro nao realizadoo, ID ja uso.");
						getch();
					}
				}
				break;
			case 2:
				system("CLS");
				printf("----------------------\n");
				printf("  Digite a operacao: \n   1)Buscar cliente\n   2)Remover cliente\n   3)Listar clientes\n   4)Reativar cliente\n ");
				printf("----------------------\n");
				scanf("%i", &opcao_2);
				switch(opcao_2){//2 switch = opcoes do menu adm
					printf("----------------------\n");
			        scanf("%i", &opcao_2);
			        getchar();
			     
					case 1://busca
			            system("CLS");
			            printf("Digite o ID a pesquisar: ");
			            scanf("%i", &id);
			            res = Buscar_cliente(cliente, id, tam_cliente);

			            if (res != -1){
			              system("CLS");
			              printf("Nome: %s", cliente[res].nome);
			              printf("Email: %s", cliente[res].email);
			              printf("ID: %i\n", cliente[res].id);
			              printf("Plano: %i\n", cliente[res].plano);
			              printf("----------------------------------\n\n");
			              getch();
			            }
			            else{
			              system("CLS");
			              printf("Cliente nao encontrado\n");
			              getch();
			            }
			            break;
					case 2://remocao
			            system("CLS");
			            printf("Digite o ID que deseja remover:  ");
			            scanf("%i", &id);
			            tempo_final=clock();
			            
			            tempo_decorrido = ((tempo_final - tempo_inicial) / (CLOCKS_PER_SEC / 1));
			            printf("\n tempo decorrido de %i segundos \n", tempo_decorrido); 
			            getch();
			            if (tempo_decorrido > 15){
			              res = Remover_cliente(cliente, id, tam_cliente);
			              if (res == 1){
			                printf("cliente removido com sucesso!!!\n");
			                getch();
			              }
			            }
			            else{
			              printf("cliente nao possuia debitos");
			              getch();
			            }
			            break;
			        case 3://lista
			            system("cls");
			            Listar_clientes(cliente, tam_cliente);
			            break;
			        case 4://reativacao
			            system("CLS");
			            printf("Digite o ID que deseja reativar:  ");
			            scanf("%i", &id);
			            
			            res = Reativar_clientes(cliente, id, tam_cliente);
			            if (res == 1){
			              printf("cliente reativado com sucesso!!!\n");
			              getch();
			            }
			            else{
			              printf("ID invalido");
			              getch();
			            }
			            break;
					default:
						printf("ERROR insira opcao valida");
						getchar();
						break;			
					}
			case 3:
				SalvarArquivo(cliente, tam_cliente);
				exit(0);
				break;
			default:
				printf("ERROR insira opcao valida");
				getchar();
				break;
		}			
	}while(opcao != 4);
}
